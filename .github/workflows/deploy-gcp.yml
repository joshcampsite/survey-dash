# .github/workflows/deploy-gcp.yml

name: Deploy Dash App to Cloud Run via WIF (Docker Login Method)

on:
  push:
    branches:
      - main # Or your default branch

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }} # e.g., africa-south1
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }} # e.g., dash-survey-visualizer
  ARTIFACT_REGISTRY_REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }} # e.g., my-dash-apps
  # Full image path: <region>-docker.pkg.dev/<project-id>/<repo-name>/<image-name>
  # Using CLOUD_RUN_SERVICE_NAME as the image name here
  IMAGE_PATH: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REGISTRY_REPO }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    # Permissions needed for WIF OIDC token
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 1: Authenticate to GCP using WIF, requesting an access token output
    - name: Authenticate to Google Cloud (WIF)
      id: 'auth' # Assign an ID to reference the outputs
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}' # Format: projects/.../providers/...
        service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}' # SA email address
        token_format: 'access_token' # Request the access token

    # Step 2: Login to Google Artifact Registry using the obtained access token
    - name: Login to Google Artifact Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GCP_REGION }}-docker.pkg.dev # The registry hostname
        username: oauth2accesstoken # Standard username for token-based auth with GAR
        password: ${{ steps.auth.outputs.access_token }} # The access token from the 'auth' step

    # Step 3: Set up gcloud SDK (still needed for Cloud Run deployment)
    # Note: This will use the Application Default Credentials implicitly set up by the 'auth' action
    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    # Step 4: Build the Docker image
    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_PATH }}:${{ github.sha }} -t ${{ env.IMAGE_PATH }}:latest .

        # Add this temporary debug step:
    - name: List files in container /app directory
      run: |
        echo "--- Listing /app in built image ---"
        docker run --rm ${{ env.IMAGE_PATH }}:${{ github.sha }} ls -l /app
        echo "----------------------------------"

    # Step 5: Push the Docker image to Artifact Registry
    # This push uses the credentials established by the 'docker/login-action' step
    - name: Push Docker image to Artifact Registry
      run: docker push ${{ env.IMAGE_PATH }} --all-tags

    # Step 6: Deploy the image to Cloud Run using gcloud
    - name: Deploy to Cloud Run
      id: deploy
      uses: 'google-github-actions/deploy-cloudrun@v2'
      with:
        service: ${{ env.CLOUD_RUN_SERVICE_NAME }}
        region: ${{ env.GCP_REGION }}
        # Deploy the specific image tag that was just pushed
        image: ${{ env.IMAGE_PATH }}:${{ github.sha }}
        # Allow unauthenticated access (remove flags if authentication is needed)
        flags: '--allow-unauthenticated --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }}'

    # Step 7: Output the Cloud Run service URL
    - name: Show Cloud Run Service URL
      if: steps.deploy.outputs.url
      run: echo "Deployed successfully to:${{ steps.deploy.outputs.url }}"
